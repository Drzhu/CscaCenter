package com.guide.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

@Controller
@RequestMapping("/luke")
public class LukeController {
	
	private static SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HH_mm_ss");

	@RequestMapping(value = "guide", method = RequestMethod.GET)
	public String record(HttpServletRequest request) {
		return "luker/guide";
	}
	@RequestMapping(value = "course_query", method = RequestMethod.GET)
	public String course_query(HttpServletRequest request) {
		return "luker/course_query";
	}
	@RequestMapping(value = "course", method = RequestMethod.GET)
	public String course(HttpServletRequest request) {
		return "luker/course";
	}
	@RequestMapping(value = "common", method = RequestMethod.GET)
	public String common(HttpServletRequest request) {
		return "luker/common";
	}

	// 录音文件上传模块
	@RequestMapping(value = "upload", method = RequestMethod.POST)
	@ResponseBody
	public String record_file(HttpServletRequest request, @RequestParam("record_file") MultipartFile file)
			throws Exception {
		FileOutputStream os = null;
		InputStream is = null;
		Date currentTime = new Date();
		String dateString = formatter.format(currentTime);
		String savePath = "d://test//record";
		if (file.isEmpty() == false) {
			try {
				is = file.getInputStream();
				byte[] b = new byte[(int) file.getSize()];
				int read = 0;
				int i = 0;
				while ((read = is.read()) != -1) {
					b[i] = (byte) read;
					i++;
				}
				is.close();
				File server_file = new File(savePath);
				if (server_file.exists()) {
					server_file = new File(savePath + "/" + file.getOriginalFilename() + "_" + dateString + ".wav");
				} else {
					server_file.mkdir();
					server_file = new File(savePath + "/" + file.getOriginalFilename() + "_" + dateString + ".wav");
				}
				os = new FileOutputStream(server_file);
				os.write(b);

			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				os.flush();
				os.close();
			}
			return "{\"saved\":\"1\"}";
		} else {
			return "{\"nosaved\":\"1\"}";
		}
	}

	@RequestMapping(value = "upload1", method = RequestMethod.POST)
	@ResponseBody
	public String up(HttpServletRequest request, @RequestParam("record_file") MultipartFile file) throws Exception {
		
		if (file.isEmpty() == false) {
			Date currentTime = new Date();
			String dateString = formatter.format(currentTime);
			System.err.println(dateString);
			File tfile = new File("D://test//record//"+file.getOriginalFilename() + "_" + dateString + ".wav");
			file.transferTo(tfile);
			return "{\"saved\":\"1\"}";	
		}else{
			return "{\"nosaved\":\"1\"}";
		}
	}
}
