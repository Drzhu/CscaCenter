package com.guide.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.guide.pojo.SubmitHospital;
import com.guide.pojo.THunit;
import com.guide.pojo.TXTDownload;
import com.guide.pojo.ZlpgValue;
import com.guide.pojo.ZlpgVariable;
import com.guide.service.SubmitHospitalService;
import com.guide.service.THunitService;
import com.guide.service.ZlpgTmService;
import com.guide.service.ZlpgValueService;
import com.guide.util.DataExportUtil;
import com.guide.util.JsonUtil;
import com.guide.util.TxtUtils;

@Controller
@RequestMapping("/2")
public class ProvinceController {

	@Resource(name = "submitHospitalService")
	private SubmitHospitalService submitHospitalService;

	@Resource(name = "zlpgValueService")
	private ZlpgValueService zlpgValueService;
	@Resource(name = "tHunitService")
	private THunitService tHunitService;

	@Resource(name = "zlpgTmService")
	private ZlpgTmService zlpgTmService;

	@RequestMapping(value = "main", method = RequestMethod.GET)
	public String p_main(HttpServletRequest request) {

		return "province/main";
	}
	@RequestMapping(value = "index", method = RequestMethod.GET)
	public String index(HttpServletRequest request) {

		return "province/index";
	}
	@RequestMapping(value = "data_quality_monitor", method = RequestMethod.GET)
	public String data_quality_monitor(HttpServletRequest request) {

		return "province/data_quality_monitor";
	}
	@RequestMapping(value = "hos_question", method = RequestMethod.GET)
	public String hos_question(HttpServletRequest request) {

		return "province/hos_question";
	}
	@RequestMapping(value = "permission_deal", method = RequestMethod.GET)
	public String permission_deal(HttpServletRequest request) {

		return "province/permission_deal";
	}
	@RequestMapping(value = "hos_info_push", method = RequestMethod.GET)
	public String hos_info_push(HttpServletRequest request) {

		return "province/hos_info_push";
	}

	@RequestMapping(value = "hospital", method = RequestMethod.GET)
	public String p_hospital(HttpServletRequest request, @RequestParam("areaid") String areaid) {

		return "province/show_hospital";
	}

	@RequestMapping(value = "detail", method = RequestMethod.GET)
	public String p_detail(HttpServletRequest request, HttpSession session, @RequestParam("hunitid") String hunitid) {
		session.setAttribute("hunitid", hunitid);
		return "province/evaluate";
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "datatable_query", method = RequestMethod.GET, produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String datatable_query(HttpServletRequest request, @RequestParam("search[value]") String search,
			@RequestParam("draw") int draw, @RequestParam("start") int start, @RequestParam("areaid") int areaid,
			@RequestParam("order[0][column]") String order_k,@RequestParam("order[0][dir]") String order_t)
			throws Exception {
		String order_Column = request.getParameter("columns["+order_k+"][name]");
		String str = request.getParameter("search[value]");
		if (str.contains("\"")) {
			str = str.replace(str.substring(str.indexOf("\""), str.length()), "");
		}
		int len = submitHospitalService.query_count(str, areaid);
		List<SubmitHospital> list = submitHospitalService.datatable_query(start, str, areaid,order_t,order_Column);
		JSONObject json = new JSONObject();
		List<List<String>> list1 = new ArrayList<List<String>>();
		List<String> list2 = new ArrayList<String>();

		for (SubmitHospital i : list) {
			list2.add(i.getCity());
			list2.add(i.getHName());
			list2.add(i.getHlevel());
			list2.add(i.getJudgeMan());
			list2.add(i.getJMTel());
			list2.add("<a href='detail?hunitid=" + i.getHUnitID() + "'>查看</a>");
			// list2.add("<a href='detail'>查看</a>");
			list1.add(list2);
			list2 = new ArrayList<String>();
		}
		json.put("data", list1);
		json.put("recordsTotal", len);
		json.put("recordsFiltered", len);
		json.put("draw", draw);
		return json.toJSONString();
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "nosubmit_datatable_query", method = RequestMethod.GET, produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String nosubmit_datatable_query(HttpServletRequest request, @RequestParam("search[value]") String search,
			@RequestParam("draw") int draw, @RequestParam("start") int start, @RequestParam("areaid") int areaid,
			@RequestParam("order[0][column]") String order_k,@RequestParam("order[0][dir]") String order_t)
			throws Exception {
		String order_Column = request.getParameter("columns["+order_k+"][name]");
		String str = request.getParameter("search[value]");
		if (str.contains("\"")) {
			str = str.replace(str.substring(str.indexOf("\""), str.length()), "");
		}
		int len = submitHospitalService.nosubmit_query_count(str, areaid);
		List<THunit> list = submitHospitalService.nosubmit_datatable_query(start, str, areaid,order_t,order_Column);
		JSONObject json = new JSONObject();
		List<List<String>> list1 = new ArrayList<List<String>>();
		List<String> list2 = new ArrayList<String>();

		for (THunit i : list) {
			list2.add(i.getCity());
			list2.add(i.getHname());
			list2.add(i.getHlevel());
			list2.add(i.getJudgeman());
			list2.add(i.getJmtel());
			list1.add(list2);
			list2 = new ArrayList<String>();
		}
		json.put("data", list1);
		json.put("recordsTotal", len);
		json.put("recordsFiltered", len);
		json.put("draw", draw);
		return json.toJSONString();
	}

	/* 下载已填表的txt文件 */
	@RequestMapping(value = "txt_submit", method = RequestMethod.GET, produces = "text/plain;charset=UTF-8")
	public void txt_submit(HttpServletRequest request, HttpServletResponse resp,
			@RequestParam("areaid") String areaid) throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		//String file_path = "D://test//pp" + areaid + ".txt";
		String file_path = request.getRealPath("/files/") + areaid + ".txt";
		String content = TxtUtils.Reflect_Column(new TXTDownload());
		List<TXTDownload> zlpg_list = zlpgValueService.submit_txt(areaid);
		for (TXTDownload i : zlpg_list) {
				content += TxtUtils.Reflect(i) + "\r\n";
		}
		TxtUtils.contentToTxt(file_path, content);
		File file = new File(file_path);
		InputStream fin = null;
		ServletOutputStream out = null;
		String ss = "已填表医院信息.txt";
		String fileName = areaid + ".txt";
		try {
			String uncod = URLDecoder.decode(ss, "UTF-8");
			fileName = new String(uncod.getBytes("UTF-8"), "iso-8859-1");
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		try {
			fin = new FileInputStream(file);
			resp.setCharacterEncoding("utf-8");
			resp.setContentType("text/plain");
			resp.addHeader("Content-Disposition", "attachment;filename=" + fileName);
			out = resp.getOutputStream();
			byte[] buffer = new byte[512]; // 缓冲区
			int bytesToRead = -1;
			// 通过循环将读入的Word文件的内容输出到浏览器中
			while ((bytesToRead = fin.read(buffer)) != -1) {
				out.write(buffer, 0, bytesToRead);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fin != null)
				try {
					fin.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			if (out != null)
				try {
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			if (file != null)
				file.delete(); // 删除临时文件
		}
	}

	/* 下载未填表的txt文件 */
	@RequestMapping(value = "txt_nosubmit", method = RequestMethod.GET, produces = "text/plain;charset=UTF-8")
	public void txt_nosubmit(HttpServletRequest request, HttpServletResponse resp,
			@RequestParam("areaid") String areaid) {
		//String file_path = "D://test//pp" + areaid + ".txt";
		String file_path = request.getRealPath("/files/") + areaid + ".txt";
		String content = "城市"+"\t"+"医院"+"\t"+"级别"+"\t"+"卒中中心负责人"+"\t"+"电话"+"\r\n";
		List<THunit> zlpg_list = zlpgValueService.nosubmit_txt(areaid);
		for (THunit i : zlpg_list) {
			content += i.getCity() + "\t" + i.getHname() + "\t" + i.getHlevel() + "\t" + i.getLinkman() + "\t"
					+ i.getJmtel() + "\r\n";
		}
		TxtUtils.contentToTxt(file_path, content);
		File file = new File(file_path);
		InputStream fin = null;
		ServletOutputStream out = null;
		String ss = "未填表医院信息.txt";

		String fileName = areaid + ".txt";
		try {
			String uncod = URLDecoder.decode(ss, "UTF-8");
			fileName = new String(uncod.getBytes("UTF-8"), "iso-8859-1");
		} catch (Exception e1) {
			e1.printStackTrace();
		}

		try {
			fin = new FileInputStream(file);
			resp.setCharacterEncoding("utf-8");
			resp.setContentType("text/plain");
			resp.addHeader("Content-Disposition", "attachment;filename=" + fileName);
			out = resp.getOutputStream();
			byte[] buffer = new byte[512]; // 缓冲区
			int bytesToRead = -1;
			// 通过循环将读入的Word文件的内容输出到浏览器中
			while ((bytesToRead = fin.read(buffer)) != -1) {
				out.write(buffer, 0, bytesToRead);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fin != null)
				try {
					fin.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			if (out != null)
				try {
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			if (file != null)
				file.delete(); // 删除临时文件
		}
	}

	/**
	 * 下载已填表的Excel文件
	 * 
	 * @param request
	 * @param resp
	 * @param areaid
	 * @author WANGZHEN
	 * @date 2016年12月20日 14:34:59
	 */
	@RequestMapping(value = "excel_download", method = RequestMethod.GET, produces = "text/plain;charset=UTF-8")
	public void excel_download(HttpServletRequest request, HttpServletResponse resp,
			@RequestParam("areaid") String areaid) {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("result", "result");
		DataExportUtil deu = new DataExportUtil();
		List<ZlpgValue> zvList = zlpgValueService.downloadExcel(areaid);
		List<ZlpgVariable> colLost = zlpgValueService.excelColList();
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		String filename = "已填写的Excel-" + sdf.format(date);
		int length = 10000;
				try {
					File file = deu.toExcel(zvList,colLost, length, filename, request);
					deu.dataExcelExcel(file, filename, resp);
//					System.out.println("Hello World!");
				} catch (IOException e) {
					e.printStackTrace();
				}
	}

	/**
	 * 下载未填表的Excel文件
	 * 
	 * @param request
	 * @param resp
	 * @param areaid
	 * @author WANGZHEN
	 * @date 2016年12月20日 14:34:59
	 */
	@RequestMapping(value = "excel_NotFilled", method = RequestMethod.GET, produces = "text/plain;charset=UTF-8")
	public void excel_NotFilled(HttpServletRequest request, HttpServletResponse resp,
			@RequestParam("areaid") String areaid) {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("result", "result");
		DataExportUtil deu = new DataExportUtil();
		List<SubmitHospital> list = zlpgValueService.excel_NotFilled(areaid);
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		String filename = "未填写的Excel-" + sdf.format(date);
		int length = 10000;
		try {
			File file = deu.NotFiled_Excel(list, length, filename, request);
			deu.dataExcelExcel(file, filename, resp);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping(value = "select_Pcode", method = RequestMethod.GET, produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String select_Pcode(HttpServletRequest request, HttpSession session) {
		HashMap<String, List<ZlpgVariable>> map = new HashMap<String, List<ZlpgVariable>>();
		List<ZlpgVariable> pcodeList = null;
		ZlpgValue zv = new ZlpgValue();
		try {
			int hunitid = Integer.parseInt(session.getAttribute("hunitid").toString());
			int hunitExists = tHunitService.select_hospital(hunitid);
			if (hunitExists < 1) {
				int areaid = Integer.parseInt(session.getAttribute("areaid").toString());
				zv.setHunitid(hunitid);
				zv.setAreaid(areaid);
				tHunitService.insert_hospital(zv);
			}
			pcodeList = tHunitService.select_Pcode();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("zv", pcodeList);
		return JsonUtil.map2json(map);
	}

	@RequestMapping(value = "load_value", method = RequestMethod.GET, produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String load_value(HttpServletRequest request, HttpSession session) {
		HashMap<String, ZlpgValue> map = new HashMap<String, ZlpgValue>();
		ZlpgValue zv = null;
		try {
			String hunitid = session.getAttribute("hunitid").toString();
			zv = tHunitService.load_value(hunitid);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		map.put("zv", zv);
		return JsonUtil.map2json(map);
	}
}