package com.guide.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.guide.pojo.TDoctor;
import com.guide.pojo.THunit;
import com.guide.service.DoctorService;
import com.guide.service.THunitService;
import com.guide.util.JsonUtil;

/**
 * @author zhutong
 */
@Controller
@RequestMapping("/")
public class UserController {
	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
	SimpleDateFormat fmr = new SimpleDateFormat("MM-dd");
	DecimalFormat df = new DecimalFormat();
	@SuppressWarnings("unused")
	private Logger logger;

	@Resource(name = "doctorService")
	private DoctorService doctorService;

	@Resource(name = "tHunitService")
	private THunitService tHunitService;

	public UserController() {
		this.logger = Logger.getLogger(UserController.class);
	}

	// 修改密码-get
	@RequestMapping(value = "change_pass", method = RequestMethod.GET)
	public String change_pass(HttpServletRequest request, @RequestParam("username") String username) {
		request.setAttribute("username", username);
		return "change_pass";
	}

	// 退出登录
	@RequestMapping(value = "logout", method = RequestMethod.GET)
	public String logout(HttpServletRequest request, HttpSession session) {
		// 删除session登录信息
		session.setAttribute("isLogin", false);
		return "login";
	}

	@RequestMapping(value = "main", method = RequestMethod.GET)
	public String losssgout(HttpServletRequest request, HttpSession session) {
		return "main";
	}
	@RequestMapping(value = "loginForm", method = RequestMethod.POST)
	public String loginForm(HttpServletRequest request,@RequestParam("username") String username,@RequestParam("password") String password) {
		
		
		return "main";
	}
	
	//登录验证
	@ResponseBody 
	@RequestMapping(value ="Validate_b", method = RequestMethod.POST,produces="text/plain;charset=UTF-8")
	public String Validate_b(@RequestParam("username") String username,@RequestParam("password") String password, @RequestParam("rember") Boolean isrember ,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws Exception {
		HashMap< String, String> map = new HashMap<String, String>();
		TDoctor users = new TDoctor();
		users.setDrPh(username);
		users.setDpwd(password);
		System.err.println(username);
		session.setAttribute("username", username);
		
		int u = doctorService.validate_user(username);
		if (u!=0) {
			int s = doctorService.validate_right(users);
			if (s==0) {
				map.put("error_1", "用户名密码错误！");
			}else{
				map.put("success", "success");
				session.setAttribute("isLogin", true);
				System.err.println(isrember);
				if (isrember.equals(true)) {
					addCookie(username,password,response,request);	
				}
			}
		}else{
			map.put("error_0", "用户 <"+username+"> 不存在！");
		}
		return JsonUtil.map2json(map);
	}
	
	private void addCookie(String username, String password,HttpServletResponse response, HttpServletRequest request) throws UnsupportedEncodingException {
		if(!username.equals("") && !password.equals("")){  
	        //创建Cookie  
	        Cookie nameCookie=new Cookie("name",URLEncoder.encode(username,"utf-8"));  
	        Cookie pswCookie=new Cookie("psw",password);  
	          
	        //设置Cookie的父路径  
	        nameCookie.setPath(request.getContextPath()+"/");  
	        pswCookie.setPath(request.getContextPath()+"/");  
	          
	        //获取是否保存Cookie  
	        String rememberMe=request.getParameter("rember");  
	        if(rememberMe==null || rememberMe.equals(false)){//不保存Cookie  
	            nameCookie.setMaxAge(0);  
	            pswCookie.setMaxAge(0);  
	        }else{//保存Cookie的时间长度，单位为秒  
	            nameCookie.setMaxAge(7*24*60*60);  
	            pswCookie.setMaxAge(7*24*60*60);  
	        }  
	        //加入Cookie到响应头  
	        response.addCookie(nameCookie);  
	        response.addCookie(pswCookie);  
	    }  			
		}
	// ajax模糊查询医院信息
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "GetNames", method = RequestMethod.POST)
	@ResponseBody
	public JSONObject GetNames(HttpServletRequest request, @RequestParam("name") String name) {
		try {
			THunit thunit = new THunit();
			thunit.setHname(name);
			List<THunit> list = tHunitService.selectByTHunitWithHospital(thunit);
			JSONArray json_list = new JSONArray();
			for (int j = 1; j < list.size(); j++) {
				JSONObject json = new JSONObject();
				json.put("id", j);
				json.put("name", list.get(j).getHname());
				json_list.add(json);
			}
			JSONObject jj = new JSONObject();
			jj.put("success", true);
			jj.put("data", json_list);
			return jj;
		} catch (Exception ex) {
			return new JSONObject();
		}
	}

	// 登录验证---成功
	@RequestMapping(value = "regist", method = RequestMethod.GET)
	public String Validate(HttpServletRequest request, HttpServletResponse response) {

		return "regist";
	}

	// 登录验证---成功
	@RequestMapping(value = "regist_do", method = { RequestMethod.POST }, produces = "text/plain;charset=UTF-8")
	public String regist(HttpServletRequest request, HttpServletResponse response) {
		String duser = "User" + Math.round(Math.random() * 25 + 2);
		String dpwd = request.getParameter("password");
		String drPh = request.getParameter("phoneNumber");
		String wxId = "";
		String invCo = "y" + Math.round(Math.random() * 25 + 2);
		String drName = request.getParameter("realName");
		String idCard = request.getParameter("cardNumber");
		String areaname = "";
		String city = "";
		String address = "";
		String drDesc = "";
		String hospital = request.getParameter("hospitalName");
		String department = request.getParameter("department");
		String drTitle = request.getParameter("jobTitle");
		String imgAddr = (request.getParameter("personalPic_path") == null) ? ""
				: request.getParameter("personalPic_path");
		String relAddr1 = (request.getParameter("qualification_path") == null) ? ""
				: request.getParameter("qualification_path");
		String relAddr2 = (request.getParameter("otherQual_path") == null) ? ""
				: request.getParameter("otherQual_path");
		String payBankAr = request.getParameter("hospitalPro") + "-" + request.getParameter("hospitalCity");
		System.err.println(payBankAr);
		String payBankAd = "";
		String payBankBr = request.getParameter("openBank");
		String payBankOp = request.getParameter("bankBranch");
		String payAcId = request.getParameter("bankAccount");
		String payAcName = request.getParameter("realName");
		String payAcHp = request.getParameter("phoneNumber");
		String curStatus = "";
		String regStatus = "";
		Date insTime = new Date();
		Date regTime = new Date();
		Date updTime = new Date();

		TDoctor doc = new TDoctor();
		doc.setAddress(address);
		doc.setAreaname(areaname);
		doc.setCity(city);
		doc.setCurStatus(curStatus);
		doc.setDepartment(department);
		doc.setDpwd(dpwd);
		doc.setDrDesc(drDesc);
		doc.setDrName(drName);
		doc.setDrPh(drPh);
		doc.setDrTitle(drTitle);
		doc.setDuser(duser);
		doc.setHospital(hospital);
		doc.setIdCard(idCard);
		doc.setImgAddr(imgAddr);
		doc.setInsTime(insTime);
		doc.setInvCo(invCo);
		doc.setPayAcHp(payAcHp);
		doc.setPayAcId(payAcId);
		doc.setPayAcName(payAcName);
		doc.setPayBankAd(payBankAd);
		doc.setPayBankAr(payBankAr);
		doc.setPayBankBr(payBankBr);
		doc.setPayBankOp(payBankOp);
		doc.setRegStatus(regStatus);
		doc.setRegTime(regTime);
		doc.setRelAddr1(relAddr1);
		doc.setRelAddr2(relAddr2);
		doc.setUpdTime(updTime);
		doc.setWxId(wxId);

		doctorService.insert(doc);
		return "main";
	}

	@RequestMapping(value = "uploadOtherQual", method = RequestMethod.POST, produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String uploadOtherQual(@RequestParam("otherQual") MultipartFile file, HttpServletRequest request,
			@RequestParam("realName") String realName, HttpServletResponse response) throws Exception {
		OutputStream os = null;
		OutputStream os1 = null;
		try {
			String savePath = request.getSession().getServletContext().getRealPath("/static");
			if (file.isEmpty() == false) {
				InputStream is = file.getInputStream();
				byte[] b = new byte[(int) file.getSize()];
				int read = 0;
				int i = 0;
				while ((read = is.read()) != -1) {
					b[i] = (byte) read;
					i++;
				}
				is.close();
				File server_file = new File(savePath);
				System.err.println(server_file.exists());
				if (server_file.exists()) {
					server_file = new File(savePath + "/otherQual_" + realName + "_" + file.getOriginalFilename());
				} else {
					server_file.mkdir();
					server_file = new File(savePath + "/otherQual_" + realName + "_" + file.getOriginalFilename());
				}
				os = new FileOutputStream(server_file);
				os.write(b);
				os1 = new FileOutputStream(
						new File("D://test//otherQual_" + realName + "_" + file.getOriginalFilename()));
				os1.write(b);
			}
			return "static/otherQual_" + realName + "_" + file.getOriginalFilename() + "@" + savePath;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e);
			return "error";
		} finally {
			os.flush();
			os.close();
			os1.flush();
			os1.close();
		}

	}

	@RequestMapping(value = "uploadQualification", method = RequestMethod.POST, produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String uploadQualification(@RequestParam("qualification") MultipartFile file, HttpServletRequest request,
			@RequestParam("realName") String realName, HttpServletResponse response) throws Exception {
		OutputStream os = null;
		OutputStream os1 = null;
		try {
			String savePath = request.getSession().getServletContext().getRealPath("/static");
			if (file.isEmpty() == false) {
				InputStream is = file.getInputStream();
				byte[] b = new byte[(int) file.getSize()];
				int read = 0;
				int i = 0;
				while ((read = is.read()) != -1) {
					b[i] = (byte) read;
					i++;
				}
				is.close();
				os = new FileOutputStream(
						new File(savePath + "/qualification_" + realName + "_" + file.getOriginalFilename()));
				os.write(b);
				os1 = new FileOutputStream(
						new File("D://test//qualification_" + realName + "_" + file.getOriginalFilename()));
				os1.write(b);

			}
			return "static/qualification_" + realName + "_" + file.getOriginalFilename() + "@" + savePath;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e);
			return "error";
		} finally {
			os.flush();
			os.close();
			os1.flush();
			os1.close();
		}

	}

	@RequestMapping(value = "uploadPersonalPic", method = RequestMethod.POST, produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String uploadPosdetailFile(@RequestParam("personalPic") MultipartFile file, HttpServletRequest request,
			@RequestParam("realName") String realName, HttpServletResponse response) throws Exception {
		OutputStream os = null;
		OutputStream os1 = null;
		try {
			String savePath = request.getSession().getServletContext().getRealPath("/static");
			if (file.isEmpty() == false) {
				InputStream is = file.getInputStream();
				byte[] b = new byte[(int) file.getSize()];
				int read = 0;
				int i = 0;
				while ((read = is.read()) != -1) {
					b[i] = (byte) read;
					i++;
				}
				is.close();
				os = new FileOutputStream(
						new File(savePath + "/personalPic_" + realName + "_" + file.getOriginalFilename()));
				os.write(b);
				os1 = new FileOutputStream(
						new File("D://test//personalPic_" + realName + "_" + file.getOriginalFilename()));
				os1.write(b);

			}
			return "static/personalPic_" + realName + "_" + file.getOriginalFilename() + "@" + savePath;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e);
			return "error";
		} finally {
			os.flush();
			os.close();
			os1.flush();
			os1.close();
		}

	}
}
